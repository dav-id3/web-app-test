/* tslint:disable */
/* eslint-disable */
/**
 * Web app test api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface TestPostDataRequest
 */
export interface TestPostDataRequest {
    /**
     * 
     * @type {Array<TestPostDataRequestReq>}
     * @memberof TestPostDataRequest
     */
    'req': Array<TestPostDataRequestReq>;
}
/**
 * 
 * @export
 * @interface TestPostDataRequestReq
 */
export interface TestPostDataRequestReq {
    /**
     * 
     * @type {number}
     * @memberof TestPostDataRequestReq
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof TestPostDataRequestReq
     */
    'name': string;
}

/**
 * TestApi - axios parameter creator
 * @export
 */
export const TestApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * post new data
         * @summary post new data
         * @param {TestPostDataRequest} testPostDataRequest array of new data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        basePost: async (testPostDataRequest: TestPostDataRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'testPostDataRequest' is not null or undefined
            assertParamExists('basePost', 'testPostDataRequest', testPostDataRequest)
            const localVarPath = `/base`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(testPostDataRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TestApi - functional programming interface
 * @export
 */
export const TestApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TestApiAxiosParamCreator(configuration)
    return {
        /**
         * post new data
         * @summary post new data
         * @param {TestPostDataRequest} testPostDataRequest array of new data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async basePost(testPostDataRequest: TestPostDataRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.basePost(testPostDataRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TestApi - factory interface
 * @export
 */
export const TestApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TestApiFp(configuration)
    return {
        /**
         * post new data
         * @summary post new data
         * @param {TestPostDataRequest} testPostDataRequest array of new data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        basePost(testPostDataRequest: TestPostDataRequest, options?: any): AxiosPromise<void> {
            return localVarFp.basePost(testPostDataRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TestApi - object-oriented interface
 * @export
 * @class TestApi
 * @extends {BaseAPI}
 */
export class TestApi extends BaseAPI {
    /**
     * post new data
     * @summary post new data
     * @param {TestPostDataRequest} testPostDataRequest array of new data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestApi
     */
    public basePost(testPostDataRequest: TestPostDataRequest, options?: AxiosRequestConfig) {
        return TestApiFp(this.configuration).basePost(testPostDataRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


